
/**
 * @enum LogType
 * @description Defines the primary categories of loggable activities.
 */
export enum LogType {
  Bathroom = 'BATHROOM',
  Meal = 'MEAL',
}

/**
 * @enum BathroomActivity
 * @description Specifies the type of bathroom activity. Used when `LogType` is `Bathroom`.
 */
export enum BathroomActivity {
  Pee = 'PEE',
  Poop = 'POOP',
  Both = 'BOTH',
}

/**
 * @enum MealSubtype
 * @description Differentiates how a meal was obtained. Used when `LogType` is `Meal`.
 */
export enum MealSubtype {
  Given = 'GIVEN',
  Stolen = 'STOLEN',
}

/**
 * @enum PoopSubtype
 * @description Describes the characteristics of a poop event. Used when `BathroomActivity` is `Poop` or `Both`.
 */
export enum PoopSubtype {
  Small = 'SMALL',
  Normal = 'NORMAL',
  Huge = 'HUGE',
  Sick = 'SICK',
}

/**
 * @interface LogEntryData
 * @description Represents the data structure for a new log entry or an entry that is being updated.
 * This interface is used before an entry is saved to the database and assigned a unique `id`
 * or a final server-generated timestamp. It contains all possible fields for various log types.
 */
export interface LogEntryData {
  /** @property {LogType} type - The primary type of the log entry (e.g., Bathroom, Meal). */
  type: LogType;
  /** @property {BathroomActivity} [activity] - Specific activity if `type` is `Bathroom` (e.g., Pee, Poop). */
  activity?: BathroomActivity; // For bathroom
  /** @property {PoopSubtype} [poopSubtype] - Details about poop if `activity` is `Poop` or `Both`. */
  poopSubtype?: PoopSubtype; // For bathroom poop/both
  /** @property {string} [notes] - Optional notes for any log entry, can be general or specific to the activity. */
  notes?: string; // General notes, or specific meal notes
  /** @property {Date} [timestamp] - Optional. The time of the event. If not provided for new entries, a server timestamp is typically used. Allows for editing existing timestamps. */
  timestamp?: Date; // Added to allow editing the timestamp
  /** @property {MealSubtype} [mealSubtype] - If `type` is `Meal`, specifies if the meal was given or stolen. */
  mealSubtype?: MealSubtype; // For meal: Given or Stolen
  /** @property {string} [foodType] - If `type` is `Meal`, describes the type of food (e.g., Kibble, Wet Food). */
  foodType?: string; // For meal: e.g., Kibble, Wet Food
}

/**
 * @interface LogEntry
 * @extends LogEntryData
 * @description Represents a complete log entry as stored and retrieved from the database.
 * It includes all fields from `LogEntryData` plus a unique `id` assigned by the database
 * and a finalized `timestamp` (typically a JavaScript Date object converted from a Firestore Timestamp).
 */
export interface LogEntry extends LogEntryData {
  /** @property {string} id - The unique identifier for the log entry, typically generated by Firestore. */
  id: string;
  /** @property {Date} timestamp - The finalized timestamp of when the log entry occurred or was recorded. */
  timestamp: Date;
}
